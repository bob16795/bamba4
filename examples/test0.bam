std := import "std/std.bam";

// a function that takes in nothing
entry main := fn -> i32 {
    result: *i32 := new i32 = Foo.value;

    printf("Hello World!\n");
    printfoo();

    foo := new Foo;
    foo.a = 0;
    foo.bar.c = 10;

    list := new std.Types.ArrayList(Foo);
    list.append(*foo);

    foo.a = 1;

    list_two := new std.Types.ArrayList(Foo);
    list_two.append(*foo);
    list_two.append(*foo);
    list.append(*foo);
    list.append(*foo);
    list.append(*foo);
    list.append(*foo);

    std.Debug.Printer(@typeOf(list)).println(list);
    std.Debug.Printer(@typeOf(list_two)).println(list_two);

    result = 0;

    str := new std.Types.String = std.Types.String.fromStr("lol");

    std.Debug.Printer(@typeOf(str)).println(str);

    return *result;
};

printf := extern fn(s: *u8[]);

// a function that takes in nothing and returns nothing
printfoo := fn {
    // returns are optional on void functions
    printf("test\n");
};

// a class
Foo := class {
    // some values the class stores
    a := prop i32;
    bar := prop Bar;

    // a value for main
    value := 3 + 2;
    
    // a printer
    #print := fn(self: *Self) {
        printf("Foo{a: %d, bar: ", *self.a);
        std.Debug.Printer(Bar).print(*self.bar);
        printf("}");
    };
};

Bar := class {
    c := prop i32;

    #print := fn(self: *Self) {
        printf("Bar{c: %d}", *self.c);
    };
};
