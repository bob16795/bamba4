def std: import "std";

def Value: import "values.bam".Value;
def Values: import "values.bam";
def Context: import "values.bam".Context;
def LLVM: import "lib/llvm.bam";
def Error: import "error.bam".Error;

def exit: extern fn[] -> Void;

def getImpl: fn[self: *Value, ctx: *Context, name: std.Types.String] -> LLVM.lValue {
    def namePtr: &name;

    if (*self.kind != u8(Value.Kind.Function)) {
        std.Types.printf("%d\n", *self.kind);
        std.Types.printf("Error: impl non function\n");

        exit(u32(1));
    }

    def data: (*Value.FunctionData)(*self.data);

    if (data.output.is_some() & *data.output.val.kind == u8(Values.Value.Kind.TypeType)) {
        std.Types.printf("Error: impl type function ");
        data.name.print();
        std.Types.printf("\n");
        return (LLVM.lValue)(null);
    }

    def impl: data.impls.get(name);
    data.name.print();
    std.Types.printf("\n");

    if (impl != (*LLVM.lValue)(null)) {
        return *impl;
    }

    if (data.output.is_some()) {
        def input: new comptime {
            return std.Types.ArrayList(LLVM.lType);
        };
        input.init();

        def i: new usize = usize(0);

        while (*i < data.input.len()) {
            if (*data.input[*i].value.kind != u8(Values.Value.Kind.TypeType)) {
                input.push(data.input[*i].value.getType(data.ctx));
            }

            i = *i + usize(1);
        }

        def funcType: data.output.val.getType(data.ctx).functionType(
            *input.items,
        );

        data.kind = funcType;

        def str: new std.Types.String;
        str = std.Types.String.fromSlice(data.name);
        str.base.push(u8(0));

        if (*data.isExtern) {
            def func: (*ctx.externs).get(*str.base.items);
            if (func != (*LLVM.lValue)(null)) {
                return *func;
            } else {
                def func: (*data.ctx.module).addFunction(*str.base.items.ptr, funcType);
                
                (*ctx.externs).put(*str.base.items, func);
                return func;
            }
        }

        def func: (*data.ctx.module).addFunction(*str.base.items.ptr, funcType);

        data.impls.put(name, func);

        def i: new usize = usize(0);

        while (*i < data.input.len()) {
            data.ctx.addLocal(*data.input[*i].name, Values.Value.newRtValue(
                func.getParam(*i),
                *data.input[*i].value,
            ));

            i = *i + usize(1);
        }

        def oldfunc: *data.ctx.func;
        def oldret: *data.ctx.returned;
        def oldblk: (*data.ctx.builder).getBlock();

        data.ctx.returned = Bool(false);
        data.ctx.func = func;

        def blk: (*data.ctx.context).appendBasicBlock(func, "entry");
        (*data.ctx.builder).setBlock(blk);

        def result: &Statements.TopStatement.export(data.body, data.ctx);
        if (*result.isErr) {
            (*data.ctx.builder).setBlock(oldblk);

            result.errv.print();
            return func;
        }

        if (!*data.ctx.returned) {
            std.Types.printf("warn: implicit return\n");
        }

        if (usize(oldblk) != usize(0)) {
            (*data.ctx.builder).setBlock(oldblk);
            data.ctx.returned = oldret;
            data.ctx.func = oldfunc;
        }

        return func;
    } else {
        def input: new comptime {
            return std.Types.ArrayList(LLVM.lType);
        };
        input.init();

        def i: new usize = usize(0);

        while (*i < data.input.len()) {
            if (*data.input[*i].value.kind != u8(Values.Value.Kind.TypeType)) {
                input.push(data.input[*i].value.getType(data.ctx));
            }

            i = *i + usize(1);
        }

        def baseKind: (*ctx.context).voidType();

        def funcType: baseKind.functionType(
            *input.items,
        );

        data.kind = funcType;
        
        def str: new std.Types.String;
        str = std.Types.String.fromSlice(data.name);
        str.base.push(u8(0));

        if (*data.isExtern) {
            def func: (*ctx.externs).get(*str.base.items);
            if (func != (*LLVM.lValue)(null)) {
                return *func;
            } else {
                def func: (*data.ctx.module).addFunction(*str.base.items.ptr, funcType);
                
                (*ctx.externs).put(*str.base.items, func);
                return func;
            }
        }

        def func: (*data.ctx.module).addFunction(*str.base.items.ptr, funcType);

        data.impls.put(name, func);

        def i: new usize = usize(0);

        while (*i < data.input.len()) {
            data.ctx.addLocal(*data.input[*i].name, Values.Value.newRtValue(
                func.getParam(*i),
                *data.input[*i].value,
            ));

            i = *i + usize(1);
        }

        def oldfunc: *data.ctx.func;
        def oldret: *data.ctx.returned;
        def oldblk: (*data.ctx.builder).getBlock();

        data.ctx.returned = Bool(false);
        data.ctx.func = func;

        def blk: (*data.ctx.context).appendBasicBlock(func, "entry");
        (*data.ctx.builder).setBlock(blk);

        def result: &Statements.TopStatement.export(data.body, data.ctx);
        if (*result.isErr) {
            (*data.ctx.builder).setBlock(oldblk);

            result.errv.print();
            return func;
        }

        if (!*data.ctx.returned) {
            (*data.ctx.builder).buildVoidRet();
        }

        if (usize(oldblk) != usize(0)) {
            (*data.ctx.builder).setBlock(oldblk);
            data.ctx.returned = oldret;
            data.ctx.func = oldfunc;
        }

        return func;
    }
};

def VisitResult: std.Types.Result(Values.Value, Error);
def visitCall: fn[self: *Values.Value, ctx: *Values.Context, params: *std.Types.ArrayList(Value)] -> VisitResult {
    def i: new usize = usize(0);

    def data: (*Values.Value.FunctionData)(*self.data);
    def new_ctx: (*Values.Context)(std.Types.malloc(Values.Context.SIZE));
    new_ctx = data.ctx.clone();
    def ctx: new_ctx;

    def name: new std.Types.String;
    name = std.Types.String.from("");

    while (*i < params.len()) {
        name.appendSlice(params[*i].getName());

        ctx.addLocal(*data.input[*i].name, *params[*i]);

        i = *i + usize(1);
    }

    def kind: data.kinds.get(*name);

    if (kind != (*Values.Value)(null)) {
        return VisitResult.ok(*kind);
    }

    def result: &TopStatement.visit(data.body, ctx);
    if (*result.isErr) {
        return *result;
    }
    
    data.kinds.put(*name, *result.okv);

    return *result;
};
