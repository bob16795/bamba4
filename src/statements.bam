def std: import "std";
def Expressions: import "expressions.bam";
def Position: import "position.bam";
def Nodes: import "nodes.bam";
def Values: import "values.bam";
def Error: import "error.bam".Error;

def printf: extern fn[] -> Void;

def VisitResult: std.Types.Result(Values.Value, Error);

def TopStatement: class {
    def Kind: class {
        def Block: 0;
        def Expression: 1;
        def Definition: 2;
        def Return: 3;
        def If: 4;
        def While: 5;
    };

    def pos: prop Position.FileRange;
    def kind: prop u8;
    def child: prop *Void;

    def PrsResult: std.Types.Result(Self, Error);
    def parse: fn[scn: *Scanner] -> PrsResult {
        def start: &scn.getCheckpoint();

        def parsed: &BlockStatement.parse(scn);
        if (!*parsed.isErr) {
            def expr: (*BlockStatement)(std.Types.malloc(BlockStatement.SIZE));
            expr = *parsed.okv;

            return PrsResult.ok(Self($[
                start.tok_end.to(scn.tok_end),
                u8(Kind.Block),
                expr,
            ]));
        }
        drop parsed;
                    
        scn.setCheckpoint(start);
        
        def parsed: &IfStatement.parse(scn);
        if (!*parsed.isErr) {
            def expr: (*IfStatement)(std.Types.malloc(IfStatement.SIZE));
            expr = *parsed.okv;

            return PrsResult.ok(Self($[
                start.tok_end.to(scn.tok_end),
                u8(Kind.If),
                expr,
            ]));
        }
        drop parsed;
                    
        scn.setCheckpoint(start);
        
        def parsed: &WhileStatement.parse(scn);
        if (!*parsed.isErr) {
            def expr: (*WhileStatement)(std.Types.malloc(WhileStatement.SIZE));
            expr = *parsed.okv;

            return PrsResult.ok(Self($[
                start.tok_end.to(scn.tok_end),
                u8(Kind.While),
                expr,
            ]));
        }
        drop parsed;
                    
        scn.setCheckpoint(start);
        
        def parsed: &Nodes.DefinitionNode.parse(scn);
        if (!*parsed.isErr) {
            return PrsResult.ok(Self($[
                start.tok_end.to(scn.tok_end),
                u8(Kind.Definition),
                (*DefinitionNode)(std.Types.malloc(Nodes.DefinitionNode.SIZE)) = *parsed.okv,
            ]));
        }

        drop parsed;
                    
        scn.setCheckpoint(start);
        
        def parsed: &Expressions.TopExpression.parse(scn);
        if (!*parsed.isErr) {
            if ((&scn.matchNext(u8(Token.Kind.SemiColon))).is_none()) {
                scn.setCheckpoint(start);
    
                return PrsResult.err(Error.TodoError("semi colon"));
            }

            def expr: (*TopExpression)(std.Types.malloc(Expressions.TopExpression.SIZE));
            expr = *parsed.okv;

            return PrsResult.ok(Self($[
                start.tok_end.to(scn.tok_end),
                u8(Kind.Expression),
                expr,
            ]));
        }
        drop parsed;
                    
        scn.setCheckpoint(start);

        if ((&scn.matchNext(u8(Token.Kind.Return))).is_some()) {
            if ((&scn.matchNext(u8(Token.Kind.SemiColon))).is_some()) {
                return PrsResult.ok(Self($[
                    start.tok_end.to(scn.tok_end),
                    u8(Kind.Return),
                    usize(0),
                ]));
            }   

            def parsed: &Expressions.TopExpression.parse(scn);
            if (!*parsed.isErr) {
                if ((&scn.matchNext(u8(Token.Kind.SemiColon))).is_none()) {
                    scn.setCheckpoint(start);
                    return PrsResult.err(Error.TodoError("semi colon"));
                }

                def body: (*TopExpression)(std.Types.malloc(Expressions.TopExpression.SIZE));
                body = *parsed.okv;

                return PrsResult.ok(Self($[
                    start.tok_end.to(scn.tok_end),
                    u8(Kind.Return),
                    body,
                ]));
            }
            drop parsed;
        }
                    
        scn.setCheckpoint(start);

        return PrsResult.err(Error.ParseError("expected statement", *(&scn.next()).val.pos));
    };

    def visit: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        if (*self.kind == u8(Kind.Expression)) {
            def data: (*TopExpression)(*self.child);

            return TopExpression.visit(data, ctx);
        } else if (*self.kind == u8(Kind.Return)) {
            def data: (*TopExpression)(*self.child);

            return TopExpression.visit(data, ctx);
        //} else if (*self.kind == u8(Kind.Definition)) {
        //    def data: (*DefinitionNode)(*self.child);

        //    return data.visit(ctx);
        } else if (*self.kind == u8(Kind.Block)) {
            def data: (*BlockStatement)(*self.child);

            return data.visit(ctx);
        }

        return VisitResult.err(Error.Unreachable("statement export"));
    };

    def export: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        if (*self.kind == u8(Kind.Expression)) {
            def data: (*TopExpression)(*self.child);

            return data.export(ctx);
        } else if (*self.kind == u8(Kind.Definition)) {
            def data: (*DefinitionNode)(*self.child);

            return data.export(ctx);
        } else if (*self.kind == u8(Kind.Return)) {
            if (*self.child == (*Void)(null)) {
                ctx.dropLocals();

                (*ctx.builder).buildVoidRet();

                def tmp: new Values.Value = null;

                return VisitResult.ok(*tmp);
            }

            def data: (*TopExpression)(*self.child);

            def res: &data.export(ctx);
            if (*res.isErr) {
                return VisitResult.err(*res.errv);
            }

            ctx.returned = Bool(true);

            ctx.dropLocals();

            (*ctx.builder).buildRet(res.okv.getValue(ctx));

            return *res;
        } else if (*self.kind == u8(Kind.Block)) {
            def data: (*BlockStatement)(*self.child);

            return data.export(ctx);
        } else if (*self.kind == u8(Kind.If)) {
            def data: (*IfStatement)(*self.child);

            return data.export(ctx);
        } else if (*self.kind == u8(Kind.While)) {
            def data: (*WhileStatement)(*self.child);

            return data.export(ctx);
        }

        return VisitResult.err(Error.Unreachable("statement export"));
    };
};

def BlockStatement: class {
    def ChildrenType: std.Types.ArrayList(TopStatement); 

    def children: prop ChildrenType;
    
    def PrsResult: std.Types.Result(Self, Error);
    def parse: fn[scn: *Scanner] -> PrsResult {
        def start: &scn.getCheckpoint();

        if ((&scn.matchNext(u8(Token.Kind.LeftBrace))).is_some()) {
            def children: new ChildrenType;
            children.init();

            while ((&scn.matchNext(u8(Token.Kind.RightBrace))).is_none()) {
                if (scn.isAtEnd()) {
                    scn.setCheckpoint(start);

                    return PrsResult.err(Error.ParseError("unclosed `{`", *(&scn.next()).val.pos));
                }

                def expr: &TopStatement.parse(scn);
                if (*expr.isErr) {
                    scn.setCheckpoint(start);

                    return PrsResult.err(Error.ParseError("Expected statemnt", *(&scn.next()).val.pos));
                }

                children.push(*expr.okv);
            }

            return PrsResult.ok(Self($[
                *children,
            ]));
        }

        return PrsResult.err(Error.TodoError("parse block"));
    };

    def export: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        def i: new usize = usize(0);
        
        def new_ctx: (*Values.Context)(std.Types.malloc(Values.Context.SIZE));
        new_ctx = ctx.clone();
        def ctx: new_ctx;

        while (*i < self.children.len()) {
            def result: &TopStatement.export(self.children[*i], ctx);
            if (*result.isErr) {
                return VisitResult.err(*result.errv);
            }

            i = *i + usize(1);
        }

        new_ctx.dropLocals();

        return VisitResult.ok(null);
    };

    def visit: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        def i: new usize = usize(0);

        def result: new Values.Value;

        while (*i < self.children.len()) {
            def res: &TopStatement.visit(self.children[*i], ctx);
            if (*res.isErr) {
                return VisitResult.err(*res.errv);
            }

            result = *res.okv;

            i = *i + usize(1);
        }

        return VisitResult.ok(*result);
    };
};

def IfStatement: class {
    def ElseBodyType: std.Types.Option(TopStatement); 

    def cond: prop TopExpression;
    def body: prop TopStatement;
    def elseBody: prop ElseBodyType;
    
    def PrsResult: std.Types.Result(Self, Error);
    def parse: fn[scn: *Scanner] -> PrsResult {
        def start: &scn.getCheckpoint();

        if ((&scn.matchNext(u8(Token.Kind.If))).is_none()) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(Error.ParseError("expected `if`", pos));
        }

        if ((&scn.matchNext(u8(Token.Kind.LeftParen))).is_none()) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(Error.ParseError("expected `(` after if", pos));
        }

        def cond: &TopExpression.parse(scn);
        if (*cond.isErr) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(*cond.errv);
        }

        if ((&scn.matchNext(u8(Token.Kind.RightParen))).is_none()) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(Error.ParseError("expected `)` after if cond", pos));
        }

        def body: &TopStatement.parse(scn);
        if (*body.isErr) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(*body.errv);
        }

        def elseBody: &ElseBodyType.none();
        
        if ((&scn.matchNext(u8(Token.Kind.Else))).is_some()) {
            def tmpBody: &TopStatement.parse(scn);
            if (*tmpBody.isErr) {
                def pos: *(&scn.next()).val.pos;

                scn.setCheckpoint(start);
                return PrsResult.err(*tmpBody.errv);
            }
            
            elseBody = ElseBodyType.some(*tmpBody.okv);
        }

        return PrsResult.ok(Self($[
            *cond.okv,
            *body.okv,
            *elseBody,
        ]));
    };

    def visit: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        return VisitResult.err(Error.TodoError("visit if"));
    };
    
    def export: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        def condv: &TopExpression.export(self.cond, ctx);
        if (*condv.isErr) {
            return *condv;
        }

        if (*condv.okv.kind == u8(Values.Value.Kind.ConstBool)) {
            def b: (*Bool)(*condv.okv.data);
            if (*b) {
                return self.body.export(ctx);
            } else if (self.elseBody.is_some()) {
                return self.elseBody.val.export(ctx);
            }

            return VisitResult.ok(Values.Value.newVoidType());
        }

        if (*condv.okv.kind == u8(Values.Value.Kind.RtValue)) {
            def startBlock: (*ctx.builder).getBlock();

            def bodyBlock: (*ctx.context).appendBasicBlock(*ctx.func, "ifBody");
            (*ctx.builder).setBlock(bodyBlock);
            def err: &self.body.export(ctx);
            if (*err.isErr) {
                return *err;
            }

            def cond: condv.okv.getValue(ctx);

            if (self.elseBody.is_some()) {
                def elseBlock: (*ctx.context).appendBasicBlock(*ctx.func, "ifElse");
                (*ctx.builder).setBlock(elseBlock);
                def err: &self.elseBody.val.export(ctx);
                if (*err.isErr) {
                    return *err;
                }
                
                def mergeBlock: (*ctx.context).appendBasicBlock(*ctx.func, "ifMerge");
                (*ctx.builder).buildBranch(mergeBlock);

                (*ctx.builder).setBlock(bodyBlock);
                (*ctx.builder).buildBranch(mergeBlock);
                
                (*ctx.builder).setBlock(startBlock);
                (*ctx.builder).buildCondBranch(cond, bodyBlock, elseBlock);

                (*ctx.builder).setBlock(mergeBlock);
            } else {
                def mergeBlock: (*ctx.context).appendBasicBlock(*ctx.func, "ifMerge");
                (*ctx.builder).buildBranch(mergeBlock);
                
                (*ctx.builder).setBlock(startBlock);
                (*ctx.builder).buildCondBranch(cond, bodyBlock, mergeBlock);

                (*ctx.builder).setBlock(mergeBlock);
            }

            return VisitResult.ok(Values.Value.newVoidType());
        }

        printf("%d\n", *condv.okv.kind);

        return VisitResult.err(Error.TodoError("export if"));
    };
};

def WhileStatement: class {
    def cond: prop TopExpression;
    def body: prop TopStatement;
    
    def PrsResult: std.Types.Result(Self, Error);
    def parse: fn[scn: *Scanner] -> PrsResult {
        def start: &scn.getCheckpoint();

        if ((&scn.matchNext(u8(Token.Kind.While))).is_none()) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(Error.ParseError("expected `while`", pos));
        }

        if ((&scn.matchNext(u8(Token.Kind.LeftParen))).is_none()) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(Error.ParseError("expected `(` after while", pos));
        }

        def cond: &TopExpression.parse(scn);
        if (*cond.isErr) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(*cond.errv);
        }

        if ((&scn.matchNext(u8(Token.Kind.RightParen))).is_none()) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(Error.ParseError("expected `)` after while cond", pos));
        }

        def body: &TopStatement.parse(scn);
        if (*body.isErr) {
            def pos: *(&scn.next()).val.pos;

            scn.setCheckpoint(start);
            return PrsResult.err(*body.errv);
        }

        return PrsResult.ok(Self($[
            *cond.okv,
            *body.okv,
        ]));
    };

    def visit: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        return VisitResult.err(Error.TodoError("visit while"));
    };
    
    def export: fn[self: *Self, ctx: *Values.Context] -> VisitResult {
        def headBlock: (*ctx.context).appendBasicBlock(*ctx.func, "whileHead");
        (*ctx.builder).buildBranch(headBlock);
        (*ctx.builder).setBlock(headBlock);

        def condv: &TopExpression.export(self.cond, ctx);
        if (*condv.isErr) {
            return *condv;
        }
        def cond: condv.okv.getValue(ctx);
        
        def bodyBlock: (*ctx.context).appendBasicBlock(*ctx.func, "whileBody");
        def endBlock: (*ctx.context).appendBasicBlock(*ctx.func, "whileEnd");

        (*ctx.builder).buildCondBranch(cond, bodyBlock, endBlock);
        (*ctx.builder).setBlock(bodyBlock);
        def err: &self.body.export(ctx);
        if (*err.isErr) {
            return *err;
        }
        (*ctx.builder).buildBranch(headBlock);
        (*ctx.builder).setBlock(endBlock);

        return VisitResult.ok(Values.Value.newVoidType());
    };
};
