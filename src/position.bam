def std: import "std";

def Position: class {
    def src: prop std.Types.String;
    def file: prop std.Types.String;
    def line: prop usize;
    def col: prop usize;
    def pos: prop usize;
    
    def to: fn[self: *Self, other: *Self] -> FileRange {
        return FileRange($[*self, *other]);
    };

    def advance: fn[self: *Self, ch: u8] -> Void {
        self.pos = *self.pos + usize(1);
        if (ch == u8(10)) {
            self.line = *self.line + usize(1);
            self.col = usize(0);
        }
        
        self.col = *self.col + usize(1);
        
        return;
    };

    def print: fn[self: *Self] -> Void {
        printf("<%d:%d>", *self.line, *self.col);

        return;
    };
};

def FileRange: class {
    def start: prop Position;
    def end: prop Position;

    def print: fn[self: *Self] -> Void {
        printf("-> ");
        self.start.file.print();
        
        self.start.print();
        printf("-");
        self.end.print();
        printf("\n\n");
            
        def sp: &self.start.src.split("\n");

        def i: new usize = usize(1);
        while ((*i - usize(1)) < *self.end.line) {
            def line: &sp.next();
            
            if (!(*i < *self.start.line)) {
                printf("%4d |", *i);
                line.print();
                printf("\n", *i);
            }

            i = *i + usize(1);
        }

        return;
    };
};
